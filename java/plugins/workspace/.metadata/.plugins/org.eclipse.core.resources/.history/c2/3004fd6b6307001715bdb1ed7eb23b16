package me.commandcraft.parkshooter;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.bukkit.Bukkit;
import org.bukkit.command.BlockCommandSender;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.command.ProxiedCommandSender;
import org.bukkit.command.RemoteConsoleCommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.craftbukkit.v1_8_R3.command.VanillaCommandWrapper;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.entity.minecart.CommandMinecart;
import org.bukkit.plugin.java.JavaPlugin;

public class CommandExec {
	
	private static final String VERSION = Bukkit.getServer().getClass().getPackage().getName().split("\\.")[3];
	private static VanillaCommandWrapper wrapper;
	private static Map<String, List> selectors;
	
	public static void init(JavaPlugin plugin) {
		Set<String> commands = plugin.getDescription().getCommands().keySet();
		String pack = CommandExec.class.getPackage().getName() + ".commands.";
		for (String command : commands) {
			try {
				Class<?> exec = Class.forName(pack + StringUtils.capitalize(command) + "Exec");
				plugin.getCommand(command).setExecutor((CommandExecutor) exec.newInstance());
			} catch (Exception e) {
				Logger.severe("Disable because can't load command: " + command);
				Bukkit.getPluginManager().disablePlugin(plugin);
			}
			try {
				Class<?> tab = Class.forName(pack + StringUtils.capitalize(command) + "Tab");
				plugin.getCommand(command).setTabCompleter((TabCompleter) tab.newInstance());
			} catch (Exception e) {}
		}
		setWrapper();
	}
	
	private static void setWrapper() {
		Class<?> wrapper = Class.forName("org.bukkit.craftbukkit." + VERSION + ".command.VanillaCommandWrapper");
		
		Object abs = Proxy.newProxyInstance(wrapper.getClassLoader(), new Class[] {wrapper}, new InvocationHandler() {
			
			@Override
			public Object invoke(Object proxy, Method method, Object[] args)
					throws Throwable {
				String name = method.getName();
				if (name.equals("compareTo")) return 0;
				if (name.equals("getusage")) return null;
				if (name.equals("getCommand")) return null;
				if (name.equals("execute")) {
					CommandExec.addToQue
				}
				return null;
			}
		})
		wrapper = new VanillaCommandWrapper(new CommandAbstract() {
			@Override
			public int compareTo(ICommand o) {return 0;}
			@Override
			public String getUsage(ICommandListener arg0) {return null;}
			@Override
			public String getCommand() {return null;}
			
			@Override
			public void execute(ICommandListener arg0, String[] arg1)
					throws CommandException {
				
			}
		});
	}
	
	public static void addToMap(String id, List l) {
		selectors.put(id, l);
	}
}
