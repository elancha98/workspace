package me.commandcraft.parkshooter;

import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.bukkit.Bukkit;
import org.bukkit.command.BlockCommandSender;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.command.ProxiedCommandSender;
import org.bukkit.command.RemoteConsoleCommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.craftbukkit.v1_11_R1.CraftServer;
import org.bukkit.craftbukkit.v1_11_R1.command.CraftBlockCommandSender;
import org.bukkit.craftbukkit.v1_11_R1.command.ProxiedNativeCommandSender;
import org.bukkit.craftbukkit.v1_11_R1.entity.CraftMinecartCommand;
import org.bukkit.craftbukkit.v1_11_R1.entity.CraftPlayer;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.entity.minecart.CommandMinecart;
import org.bukkit.plugin.java.JavaPlugin;

import net.minecraft.server.v1_11_R1.CommandException;
import net.minecraft.server.v1_11_R1.ICommandListener;
import net.minecraft.server.v1_11_R1.MinecraftServer;
import net.minecraft.server.v1_11_R1.PlayerSelector;

public class CommandExec {
	
	private static final String VERSION = Bukkit.class.getPackage().getName().split("\\.")[3];
	
	public static void init(JavaPlugin plugin) {
		Set<String> commands = plugin.getDescription().getCommands().keySet();
		String pack = CommandExec.class.getPackage().getName() + ".commands.";
		for (String command : commands) {
			try {
				Class<?> exec = Class.forName(pack + StringUtils.capitalize(command) + "Exec");
				plugin.getCommand(command).setExecutor((CommandExecutor) exec.newInstance());
			} catch (Exception e) {
				Logger.severe("Disable because can't load command: " + command);
				Bukkit.getPluginManager().disablePlugin(plugin);
			}
			try {
				Class<?> tab = Class.forName(pack + StringUtils.capitalize(command) + "Tab");
				plugin.getCommand(command).setTabCompleter((TabCompleter) tab.newInstance());
			} catch (Exception e) {}
		}
	}
	
	public static List<net.minecraft.server.v1_11_R1.Entity> getEntities(CommandSender sender, String p, Class<?> T) throws CommandException {
		Object listener = getListener(sender);
		getPlayerSelector().getMethod("getPlayers", getICommandListener(), String.class, Class<? extends T>).invoke(null, listener, p, getEntity());
		return PlayerSelector.getPlayers(listener, p, getEntity());
	}
	
	@SuppressWarnings("deprecation")
	private static Object getListener(final CommandSender sender) throws Exception {
        if (sender instanceof Player) {
        	return getCraftPlayer().getMethod("getHandle").invoke(sender);
        }
        if (sender instanceof BlockCommandSender) {
        	return getCraftBlockCommandSender().getMethod("getTileEntity").invoke(sender);
        }
        if (sender instanceof CommandMinecart) {
        	Object tmp = getCraftMinecartCommand().getMethod("getHandle").invoke(sender);
        	return tmp.getClass().getMethod("getCommandBlock").invoke(tmp);
        }
        if (sender instanceof RemoteConsoleCommandSender) {
        	Object server = getMinecraftServer().getMethod("getServer").invoke(null);
        	return server.getClass().getField("remoteControlCommandListener").get(server);
            //return ((DedicatedServer)MinecraftServer.getServer()).remoteControlCommandListener;
        }
        if (sender instanceof ConsoleCommandSender) {
        	Object tmp = getCraftServer().getMethod("getServer").invoke(sender);
        	return tmp.getClass().getMethod("getServer").invoke(tmp);
        }
        if (sender instanceof ProxiedCommandSender) {
        	return getProxiedNativeCommandSender().getMethod("getHandle").invoke(sender);
        }
        throw new IllegalArgumentException("Cannot make " + sender + " a vanilla command listener");
    }
	
	@SuppressWarnings("unchecked")
	private static <T> Class<? extends T> getEntity() {
		return (Class<? extends T>) Entity.class;
	}
	
	
	//Methods for easier reflection
	private static Class<?> getCommandException() {
		try {
			return Class.forName("net.minecraft.server." + VERSION + ".CommandException");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getICommandListener() {
		try {
			return Class.forName("net.minecraft.server." + VERSION + ".ICommandListener");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getMinecraftServer() {
		try {
			return Class.forName("net.minecraft.server." + VERSION + ".MinecraftServer");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getPlayerSelector() {
		try {
			return Class.forName("net.minecraft.server." + VERSION + ".PlayerSelector");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftServer() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".CraftServer");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftBlockCommandSender() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + "command.CraftBlockCommandSender");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getProxiedNativeCommandSender() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".command.ProxiedNativeCommandSender");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftMinecartCommand() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".entity.CraftMinecartCommand");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftPlayer() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".entity.CraftPlayer");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}
