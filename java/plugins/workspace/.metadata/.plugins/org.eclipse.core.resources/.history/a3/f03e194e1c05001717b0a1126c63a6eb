package me.commandcraft.parkshooter;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.bukkit.Bukkit;
import org.bukkit.command.BlockCommandSender;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.ConsoleCommandSender;
import org.bukkit.command.ProxiedCommandSender;
import org.bukkit.command.RemoteConsoleCommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.entity.minecart.CommandMinecart;
import org.bukkit.plugin.java.JavaPlugin;

import com.google.common.collect.Lists;

import net.minecraft.server.v1_11_R1.BlockPosition;
import net.minecraft.server.v1_11_R1.CommandException;
import net.minecraft.server.v1_11_R1.ICommandListener;
import net.minecraft.server.v1_11_R1.Vec3D;
import net.minecraft.server.v1_11_R1.World;

public class CommandExec {
	
	private static final String VERSION = Bukkit.getServer().getClass().getPackage().getName().split("\\.")[3];
	private static Method get_players;
	
	static Pattern a = Pattern.compile("^@([pare])(?:\\[([^ ]*)\\])?$");
	
	public static void init(JavaPlugin plugin) {
		Set<String> commands = plugin.getDescription().getCommands().keySet();
		String pack = CommandExec.class.getPackage().getName() + ".commands.";
		for (String command : commands) {
			try {
				Class<?> exec = Class.forName(pack + StringUtils.capitalize(command) + "Exec");
				plugin.getCommand(command).setExecutor((CommandExecutor) exec.newInstance());
			} catch (Exception e) {
				Logger.severe("Disable because can't load command: " + command);
				Bukkit.getPluginManager().disablePlugin(plugin);
			}
			try {
				Class<?> tab = Class.forName(pack + StringUtils.capitalize(command) + "Tab");
				plugin.getCommand(command).setTabCompleter((TabCompleter) tab.newInstance());
			} catch (Exception e) {}
		}
	}
	
	private static void setGet_players() {
		Method[] methods = getPlayerSelector().getDeclaredMethods();
		for (int i = 0; i < methods.length; i++) {
			if (methods[i].getName().equals("getPlayers")) get_players = methods[i];
		}
	}
	
	@SuppressWarnings("unchecked")
	public static List<Entity> getEntities(CommandSender sender, String p) throws Exception {
		Object listener = getListener(sender);
		if (get_players == null) setGet_players();
		return (List<Entity>) get_players.invoke(null, listener, p, Entity.class);
	}
	
	private static Object getListener(final CommandSender sender) throws Exception {
        if (sender instanceof Player) {
        	return getCraftPlayer().getMethod("getHandle").invoke(sender);
        }
        if (sender instanceof BlockCommandSender) {
        	return getCraftBlockCommandSender().getMethod("getTileEntity").invoke(sender);
        }
        if (sender instanceof CommandMinecart) {
        	Object tmp = getCraftMinecartCommand().getMethod("getHandle").invoke(sender);
        	return tmp.getClass().getMethod("getCommandBlock").invoke(tmp);
        }
        if (sender instanceof RemoteConsoleCommandSender) {
        	Object server = getMinecraftServer().getMethod("getServer").invoke(null);
        	return server.getClass().getField("remoteControlCommandListener").get(server);
            //return ((DedicatedServer)MinecraftServer.getServer()).remoteControlCommandListener;
        }
        if (sender instanceof ConsoleCommandSender) {
        	return getCraftServer().getMethod("getServer").invoke(sender.getServer());
        }
        if (sender instanceof ProxiedCommandSender) {
        	return getProxiedNativeCommandSender().getMethod("getHandle").invoke(sender);
        }
        throw new IllegalArgumentException("Cannot make " + sender + " a vanilla command listener");
	}
	
	public static <T extends Entity> List<T> getPlayers(
			ICommandListener paramICommandListener, String paramString,
			Class<? extends T> paramClass) throws CommandException {
		Matcher localMatcher = a.matcher(paramString);

		if ((localMatcher.matches()) && (paramICommandListener.a(1, "@"))) {
			Map localMap = d(localMatcher.group(2));
			if (!(b(paramICommandListener, localMap))) {
				return Collections.emptyList();
			}

			String str = localMatcher.group(1);
			BlockPosition localBlockPosition = a(localMap,
					paramICommandListener.getChunkCoordinates());
			Vec3D localVec3D = b(localMap, paramICommandListener.d());
			List localList = a(paramICommandListener, localMap);
			ArrayList localArrayList1 = Lists.newArrayList();

			for (World localWorld : localList) {
				if (localWorld == null) {
					continue;
				}

				ArrayList localArrayList2 = Lists.newArrayList();
				localArrayList2.addAll(a(localMap, str));
				localArrayList2.addAll(b(localMap));
				localArrayList2.addAll(c(localMap));
				localArrayList2.addAll(d(localMap));
				localArrayList2.addAll(c(paramICommandListener, localMap));
				localArrayList2.addAll(e(localMap));
				localArrayList2.addAll(f(localMap));
				localArrayList2.addAll(a(localMap, localVec3D));
				localArrayList2.addAll(g(localMap));

				localArrayList1.addAll(a(localMap, paramClass, localArrayList2,
						str, localWorld, localBlockPosition));
			}
			return a(localArrayList1, localMap, paramICommandListener,
					paramClass, str, localVec3D);
		}

		return Collections.emptyList();
	}
	
	//Methods for easier reflection
	private static Class<?> getMinecraftServer() {
		try {
			return Class.forName("net.minecraft.server." + VERSION + ".MinecraftServer");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getPlayerSelector() {
		try {
			return Class.forName("net.minecraft.server." + VERSION + ".PlayerSelector");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftServer() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".CraftServer");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftBlockCommandSender() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + "command.CraftBlockCommandSender");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getProxiedNativeCommandSender() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".command.ProxiedNativeCommandSender");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftMinecartCommand() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".entity.CraftMinecartCommand");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	private static Class<?> getCraftPlayer() {
		try {
			return Class.forName("org.bukkit.craftbukkit." + VERSION + ".entity.CraftPlayer");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}
