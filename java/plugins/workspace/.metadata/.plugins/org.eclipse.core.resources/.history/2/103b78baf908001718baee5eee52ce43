package me.commandcraft.testcommand;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLDecoder;
import java.util.jar.JarFile;

import org.bukkit.plugin.java.JavaPlugin;

public class LibLoader {
	
	private static boolean RUNNING_FROM_JAR = false;
	
	static {
        final URL resource = JarUtils.class.getClassLoader().getResource("plugin.yml");
        if (resource != null) RUNNING_FROM_JAR = true;
    }

	public static void loadLib(JavaPlugin plugin, String libr) throws Exception {
		final File lib = new File(plugin.getDataFolder(), libr);
		if (!lib.exists()) JarUtils.extractFromJar(lib.getName(), lib.getAbsolutePath());
		addClassPath(getJarUrl(lib));
	}
	
	private static void addClassPath(URL url) throws Exception {
		URLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();
		Class<URLClassLoader> sysclass = URLClassLoader.class;
		Method method = sysclass.getDeclaredMethod("addURL", URL.class);
		method.setAccessible(true);
        method.invoke(sysloader, url);
	}
	
	private static URL getJarUrl(File file) throws MalformedURLException {
		return new URL("jar:" + file.toURI().toURL().toExternalForm() + "!/");
	}
	
	private static void extractFromJar(String origin, String dest) {
		
	}
	
	private static JarFile getRunningJar() throws IOException {
		if (!RUNNING_FROM_JAR) return null;
		String path = new File(LibLoader.class.getProtectionDomain().getCodeSource().
				getLocation().getPath()).getAbsolutePath();
		path = URLDecoder.decode(path, "UTF-8");
		return new JarFile(path);
	}
}
